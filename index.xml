<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kubernetes Ravings</title><link>http://www.belgai.de/</link><description>Recent content on Kubernetes Ravings</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Mohamed Belgaied Hassine - All rights reserved</copyright><lastBuildDate>Mon, 29 Mar 2021 20:48:37 +0000</lastBuildDate><atom:link href="http://www.belgai.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Harvester VM with Bridged Network</title><link>http://www.belgai.de/blog/harvester/harvester_bridge_network/</link><pubDate>Mon, 29 Mar 2021 20:48:37 +0000</pubDate><guid>http://www.belgai.de/blog/harvester/harvester_bridge_network/</guid><description>In the first article of this blog, I focused on installing Harvester and creating my first VM. In this article, I will describe how to create a VM that I can connect to directly through SSH. Indeed, the default networking mode used by Harvester is the masquerade mode, where the VMs get a cluster IP address, but cannot be accessed directly from outside the Harvester Cluster. In order to access the VMs from outside the cluster, you would need to create a NodePort service or a LoadBalancer service on the Kubernetes cluster underlying Harvester.</description></item><item><title>Discovering HCI Project Harvester</title><link>http://www.belgai.de/blog/harvester/harvester_discover/</link><pubDate>Wed, 17 Mar 2021 13:07:15 +0100</pubDate><guid>http://www.belgai.de/blog/harvester/harvester_discover/</guid><description>Introduction to Harvester Harvester is an OSS (Open Source Software) project created by Rancher Labs (now part of SUSE) that provides a Kubernetes-based HCI (Hyper-Converged Infrastructure) solution. Its main goal is to combine many existing OSS projects to offer an easy-to-use platform for software defined infrastructure. This includes :
Compute Virtualization using KubeVirt Software Defined Block Storage using Longhorn Software Defined Networking using Multus Snapshotting and Templates using MinIO The objective of Harvester is to use the same platform for both containerized workloads as well as more traditional VM-based workloads, and still make the latter able to use Kubernetes features like load balancing, service discovery, etc.</description></item></channel></rss>